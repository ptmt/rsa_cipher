<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>rsa_cipher</name></assembly>
<members>
<member name="M:millerrabin.isPrimeW(System.Collections.Generic.IEnumerable{System.Numerics.BigInteger},System.Numerics.BigInteger)">
<summary>
For Miller-Rabin the witnesses need to be selected at random from the interval [2, n - 2]. 
More witnesses =&gt; better accuracy of the test.
Also, remember that if Miller-Rabin returns true, then the number is _probable_ prime. 
If it returns false the number is composite.
</summary>
</member>
<member name="M:millerrabin.millerRabinPrimality(System.Numerics.BigInteger,System.Numerics.BigInteger)">
<summary>
See: http://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:millerrabin.pow'``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{System.Numerics.BigInteger,System.Numerics.BigInteger}},Microsoft.FSharp.Core.FSharpFunc`2{``0,``0},``0,System.Numerics.BigInteger)">
<summary>
This implementation is based on the Miller-Rabin Haskell implementation 
from http://www.haskell.org/haskellwiki/Testing_primality
</summary>
</member>
<member name="T:millerrabin">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:rsa_cipher">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:rsa_helpers">

</member>
</members>
</doc>
